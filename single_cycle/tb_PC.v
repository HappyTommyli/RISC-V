`timescale 1ns / 1ps
module pc_tb();

    reg clk;          // Simulated clock signal (generated by testbench)
    reg rst;          // Simulated reset signal (generated by testbench)
    reg [31:0] next_pc; // Simulated next PC value (generated by testbench, mimicking branch/jump logic)
    wire [31:0] pc_address; // Connected to PC module output (monitors current PC value)

    pc uut (
        .clk(clk),
        .rst(rst),
        .next_pc(next_pc),
        .pc_address(pc_address)
    );

    initial begin
        clk = 1'b0;  // Initialize clock to 0
        forever #5 clk = ~clk; // Toggle every 5ns, 10ns period total
    end

    initial begin
        // Initialize 
        rst = 1'b1;    
        next_pc = 32'h00000000; 

        // Print test information (real-time signal monitoring)
        $display("PC module test started, time unit: ns");
        $monitor("Time=%0t | clk=%b | rst=%b | next_pc=0x%0h | pc_address=0x%0h",
                 $time, clk, rst, next_pc, pc_address);

        // test 1: Reset phase (last 15ns, covering 1.5 clock cycles to ensure stable reset)
        #15;
        rst = 1'b0;    // Deassert reset (reset inactive)

        // test 2: Normal PC increment (mimic sequential instruction execution, PC+4, covering 3 clock cycles)
        #10; // Wait for next clock rising edge (at 25ns)
        next_pc = 32'h00000004; // 1st update: next_pc=4

        #10; // Clock rising edge at 35ns
        next_pc = 32'h00000008; // 2nd update: next_pc=8

        #10; // Clock rising edge at 45ns
        next_pc = 32'h0000000C; // 3rd update: next_pc=12

        // test 3: Mimic jump/branch (next_pc jumps to non-consecutive address, verify responsiveness)
        #10; // Clock rising edge at 55ns
        next_pc = 32'h00000020; // Jump to 0x20 (skip intermediate addresses)

        #10; // Clock rising edge at 65ns
        next_pc = 32'h00000018; // Jump again to 0x18

        // test 4: Re-trigger reset (verify reset reusability)
        #10; // At 75ns (clock low)
        rst = 1'b1; // Re-assert reset
        next_pc = 32'h000000FF; // next_pc is irrelevant here (reset takes priority)

        #5; // At 80ns
        rst = 1'b0; // Deassert reset

        // End test (total simulation time 100ns)
        #20;
        $display("PC module test completed!");
        $finish; // Terminate simulation
    end

endmodule
